import random
import time
import pandas as pd
import numpy as np
from functools import lru_cache
from collections import defaultdict

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
N = 100000  # –†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É
Q = 50000   # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
array = [random.randint(1, 100) for _ in range(N)]  # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—Å–∏–≤—É

# –°—Ç–≤–æ—Ä—é—î–º–æ NumPy array –¥–ª—è —à–≤–∏–¥—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
np_array = np.array(array)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ (50% - —Å—É–º–∞ –≤—ñ–¥—Ä—ñ–∑–∫—É, 50% - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
queries = [
    ("Range", L := random.randint(0, N - 1), random.randint(L, N - 1))
    if random.random() < 0.5
    else ("Update", random.randint(0, N - 1), random.randint(1, 100))
    for _ in range(Q)
]


### üîπ 1. –ë–µ–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è (–±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥)
def range_sum_no_cache(L, R):
    return sum(array[L:R + 1])

def update_no_cache(index, value):
    array[index] = value

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_no_cache(query[1], query[2])
    elif query[0] == "Update":
        update_no_cache(query[1], query[2])
no_cache_time = time.time() - start_time


### üîπ 2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è NumPy –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
def range_sum_numpy(L, R):
    return np.sum(np_array[L:R + 1])

def update_numpy(index, value):
    np_array[index] = value

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_numpy(query[1], query[2])
    elif query[0] == "Update":
        update_numpy(query[1], query[2])
numpy_time = time.time() - start_time


### üîπ 3. –ü—Ä–µ—Ñ—ñ–∫—Å–Ω—ñ —Å—É–º–∏ (–±–µ–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è)
# –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –ø—Ä–µ—Ñ—ñ–∫—Å–Ω–∏—Ö —Å—É–º
prefix_sum_array = [0] * (N + 1)
for i in range(N):
    prefix_sum_array[i + 1] = prefix_sum_array[i] + array[i]

def range_sum_prefix(L, R):
    return prefix_sum_array[R + 1] - prefix_sum_array[L]

def update_prefix(index, value):
    delta = value - array[index]
    array[index] = value
    for i in range(index + 1, N + 1):
        prefix_sum_array[i] += delta

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_prefix(query[1], query[2])
    elif query[0] == "Update":
        update_prefix(query[1], query[2])
prefix_sum_time = time.time() - start_time


### üîπ 4. –ö–µ—à –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
index_to_ranges = defaultdict(set)

@lru_cache(maxsize=10000)
def range_sum_optimized_cache(L, R):
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: –∫–æ–∂–µ–Ω —ñ–Ω–¥–µ–∫—Å —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [L, R] –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ü–µ–π –∫–µ—à
    for i in range(L, R + 1):
        index_to_ranges[i].add((L, R))
    return sum(array[L:R + 1])

def update_optimized_cache(index, value):
    array[index] = value
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏, –Ω–∞ —è–∫—ñ –≤–ø–ª–∏–≤–∞—î —Ü–µ–π —ñ–Ω–¥–µ–∫—Å
    affected_ranges = index_to_ranges[index].copy()
    # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤
    for L, R in affected_ranges:
        try:
            range_sum_optimized_cache.cache_clear()  # –¢—É—Ç –∫—Ä–∞—â–µ –±—É–ª–æ –± –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –∑ —É—Å—ñ—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤, —è–∫—ñ –≤—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å
            for i in range(L, R + 1):
                index_to_ranges[i].discard((L, R))
        except:
            pass

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_optimized_cache(query[1], query[2])
    elif query[0] == "Update":
        update_optimized_cache(query[1], query[2])
optimized_cache_time = time.time() - start_time


### üîπ 5. –ö–µ—à –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
invalidation_counter = 0

@lru_cache(maxsize=10000)
def range_sum_counter_cache(L, R, counter):
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ counter –≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è—Ö, –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω –ª–∏—à–µ –¥–ª—è —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É
    return sum(array[L:R + 1])

def update_counter_cache(index, value):
    global invalidation_counter
    array[index] = value
    # –ü—Ä–æ—Å—Ç–æ –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
    invalidation_counter += 1

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_counter_cache(query[1], query[2], invalidation_counter)
    elif query[0] == "Update":
        update_counter_cache(query[1], query[2])
counter_cache_time = time.time() - start_time


### üîπ 6. –ë–ª–æ—á–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è (—Ä–æ–∑–¥—ñ–ª—è—î–º–æ –º–∞—Å–∏–≤ –Ω–∞ –±–ª–æ–∫–∏)
block_size = int(N**0.5)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –±–ª–æ–∫—É
block_sums = [sum(array[i:i + block_size]) for i in range(0, N, block_size)]

def range_sum_block_cache(L, R):
    result = 0
    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–µ–ø–æ–≤–Ω–∏–π –±–ª–æ–∫
    start_block = L // block_size
    end_block = R // block_size
    
    # –Ø–∫—â–æ L —ñ R –≤ –æ–¥–Ω–æ–º—É –±–ª–æ—Ü—ñ
    if start_block == end_block:
        return sum(array[L:R + 1])
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –±–ª–æ–∫—É
    next_block_start = (start_block + 1) * block_size
    result += sum(array[L:next_block_start])
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–≤–Ω—ñ –±–ª–æ–∫–∏ –º—ñ–∂ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º —ñ –∫—ñ–Ω—Ü–µ–≤–∏–º
    for block in range(start_block + 1, end_block):
        result += block_sums[block]
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ –±–ª–æ–∫—É
    end_block_start = end_block * block_size
    result += sum(array[end_block_start:R + 1])
    
    return result

def update_block_cache(index, value):
    block_id = index // block_size
    old_value = array[index]
    array[index] = value
    block_sums[block_id] += (value - old_value)

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_block_cache(query[1], query[2])
    elif query[0] == "Update":
        update_block_cache(query[1], query[2])
block_cache_time = time.time() - start_time


### üîπ 7. –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥: –ë–ª–æ–∫–∏ + LRU –∫–µ—à
block_sums_combined = [sum(array[i:i + block_size]) for i in range(0, N, block_size)]

@lru_cache(maxsize=10000)
def range_sum_combined(L, R, counter):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ –ª–æ–≥—ñ–∫—É, —â–æ –π —É –±–ª–æ—á–Ω–æ–º—É –∫–µ—à—É–≤–∞–Ω–Ω—ñ, –∞–ª–µ –∑ LRU –∫–µ—à–µ–º
    result = 0
    start_block = L // block_size
    end_block = R // block_size
    
    if start_block == end_block:
        return sum(array[L:R + 1])
    
    next_block_start = (start_block + 1) * block_size
    result += sum(array[L:next_block_start])
    
    for block in range(start_block + 1, end_block):
        result += block_sums_combined[block]
    
    end_block_start = end_block * block_size
    result += sum(array[end_block_start:R + 1])
    
    return result

comb_invalidation_counter = 0

def update_combined(index, value):
    global comb_invalidation_counter
    block_id = index // block_size
    old_value = array[index]
    array[index] = value
    block_sums_combined[block_id] += (value - old_value)
    comb_invalidation_counter += 1

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        range_sum_combined(query[1], query[2], comb_invalidation_counter)
    elif query[0] == "Update":
        update_combined(query[1], query[2])
combined_time = time.time() - start_time


### üîπ 8. Segment Tree (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö)
class SegmentTree:
    def __init__(self, array):
        self.n = len(array)
        self.tree = [0] * (4 * self.n)
        self.build(array, 0, 0, self.n - 1)

    def build(self, array, node, start, end):
        if start == end:
            self.tree[node] = array[start]
        else:
            mid = (start + end) // 2
            left_child = 2 * node + 1
            right_child = 2 * node + 2
            self.build(array, left_child, start, mid)
            self.build(array, right_child, mid + 1, end)
            self.tree[node] = self.tree[left_child] + self.tree[right_child]

    def update(self, idx, value, node=0, start=0, end=None):
        if end is None:
            end = self.n - 1
        if start == end:
            self.tree[node] = value
        else:
            mid = (start + end) // 2
            left_child = 2 * node + 1
            right_child = 2 * node + 2
            if idx <= mid:
                self.update(idx, value, left_child, start, mid)
            else:
                self.update(idx, value, right_child, mid + 1, end)
            self.tree[node] = self.tree[left_child] + self.tree[right_child]

    def query(self, L, R, node=0, start=0, end=None):
        if end is None:
            end = self.n - 1
        if R < start or L > end:
            return 0
        if L <= start and end <= R:
            return self.tree[node]
        mid = (start + end) // 2
        left_sum = self.query(L, R, 2 * node + 1, start, mid)
        right_sum = self.query(L, R, 2 * node + 2, mid + 1, end)
        return left_sum + right_sum

segment_tree = SegmentTree(array)

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        segment_tree.query(query[1], query[2])
    elif query[0] == "Update":
        segment_tree.update(query[1], query[2])
segment_tree_time = time.time() - start_time


### üîπ 9. Fenwick Tree (Binary Indexed Tree)
class FenwickTree:
    def __init__(self, n):
        self.n = n
        self.tree = [0] * (n + 1)

    def build(self, array):
        for i in range(1, self.n + 1):
            self.add(i, array[i - 1])

    def add(self, index, value):
        while index <= self.n:
            self.tree[index] += value
            index += index & -index

    def prefix_sum(self, index):
        result = 0
        while index > 0:
            result += self.tree[index]
            index -= index & -index
        return result

    def query(self, L, R):
        return self.prefix_sum(R + 1) - self.prefix_sum(L)

    def update(self, index, value):
        diff = value - (self.query(index, index))
        self.add(index + 1, diff)

fenwick_tree = FenwickTree(N)
fenwick_tree.build(array)

start_time = time.time()
for query in queries:
    if query[0] == "Range":
        fenwick_tree.query(query[1], query[2])
    elif query[0] == "Update":
        fenwick_tree.update(query[1], query[2])
fenwick_tree_time = time.time() - start_time


### üîπ 10. Sparse Table (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤ –±–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω—å)
# Sparse Table –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é—î –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤, –∞–ª–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
import math

class SparseTable:
    def __init__(self, array):
        self.n = len(array)
        self.log = int(math.log2(self.n)) + 1
        self.st = [[0] * self.n for _ in range(self.log + 1)]
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        for i in range(self.n):
            self.st[0][i] = array[i]
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        for i in range(1, self.log + 1):
            j = 0
            while j + (1 << i) <= self.n:
                self.st[i][j] = self.st[i-1][j] + self.st[i-1][j + (1 << (i-1))]
                j += 1

    def query(self, L, R):
        sum_result = 0
        length = R - L + 1
        for i in range(self.log, -1, -1):
            if (1 << i) <= length:
                sum_result += self.st[i][L]
                L += (1 << i)
                length -= (1 << i)
        return sum_result

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤ Sparse Table
    def update(self, index, value):
        array[index] = value
        # –ü–µ—Ä–µ–±—É–¥–æ–≤—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é (–Ω–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
        self.__init__(array)

sparse_table = SparseTable(array)

start_time = time.time()
query_count = update_count = 0
for query in queries:
    if query[0] == "Range":
        sparse_table.query(query[1], query[2])
        query_count += 1
    elif query[0] == "Update":
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–µ –≤ Sparse Table, —Ç–æ–º—É –º–∏ –ø—Ä–æ—Å—Ç–æ –º–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ array
        array[query[1]] = query[2]  # –¶–µ –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ Sparse Table
        update_count += 1
sparse_table_time = time.time() - start_time


### üìä **–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≥–∞—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ**
methods = [
    "–ë–µ–∑ –∫–µ—à—É (–±–∞–∑–æ–≤–∏–π)",
    "NumPy –º–∞—Å–∏–≤",
    "–ü—Ä–µ—Ñ—ñ–∫—Å–Ω—ñ —Å—É–º–∏",
    "–ö–µ—à –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º",
    "–ö–µ—à –∑ –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º",
    "–ë–ª–æ—á–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è",
    "–ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥",
    "Segment Tree",
    "Fenwick Tree",
    "Sparse Table (—Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Ç–∏)"
]

times = [
    no_cache_time,
    numpy_time,
    prefix_sum_time,
    optimized_cache_time,
    counter_cache_time,
    block_cache_time,
    combined_time,
    segment_tree_time,
    fenwick_tree_time,
    sparse_table_time
]

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥–Ω–æ—Å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É
relative_speeds = [no_cache_time / t if t > 0 else 0 for t in times]

# –û—Ü—ñ–Ω–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
update_complexities = [
    "O(1)",
    "O(1)",
    "O(N)",
    "O(1) + —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è",
    "O(1)",
    "O(1)",
    "O(1)",
    "O(log N)",
    "O(log N)",
    "O(N) - –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ"
]

query_complexities = [
    "O(R-L)",
    "O(R-L)",
    "O(1)",
    "O(1) –∑ –∫–µ—à–µ–º, O(R-L) –±–µ–∑",
    "O(1) –∑ –∫–µ—à–µ–º, O(R-L) –±–µ–∑",
    "O(sqrt(N))",
    "O(sqrt(N)) + –∫–µ—à",
    "O(log N)",
    "O(log N)",
    "O(1)"
]

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame
data = {
    "–ú–µ—Ç–æ–¥": methods,
    "–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)": times,
    "–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è": [f"{speed:.2f}x" for speed in relative_speeds],
    "–û–Ω–æ–≤–ª–µ–Ω–Ω—è": update_complexities,
    "–ó–∞–ø–∏—Ç": query_complexities
}

df = pd.DataFrame(data)

# –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–≤—ñ–¥ –Ω–∞–π—à–≤–∏–¥—à–æ–≥–æ –¥–æ –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–æ–≥–æ)
df = df.sort_values("–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó DataFrame –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
def style_dataframe(df):
    # –ö–æ–ø—ñ—é—î–º–æ DataFrame –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
    styling_df = df.copy()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π DataFrame
    styled_df = styling_df.style.background_gradient(
        cmap='RdYlGn_r',  # –ß–µ—Ä–≤–æ–Ω–∏–π -> –ñ–æ–≤—Ç–∏–π -> –ó–µ–ª–µ–Ω–∏–π (—Ä–µ–≤–µ—Ä—Å)
        subset=['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)'],
        vmin=min(times),
        vmax=max(times)
    )
    
    # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    styled_df = styled_df.format({
        '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)': '{:.4f} —Å–µ–∫',
    })
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    styled_df = styled_df.set_caption(f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ (N={N:,}, Q={Q:,})")
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ
    styled_df = styled_df.set_table_styles([
        {'selector': 'caption', 'props': [('font-size', '16px'), ('font-weight', 'bold')]},
        {'selector': 'th', 'props': [('font-size', '14px'), ('text-align', 'center'), 
                                    ('background-color', '#f0f0f0'), ('color', 'black')]},
        {'selector': 'td', 'props': [('font-size', '13px'), ('text-align', 'center')]}
    ])
    
    return styled_df

# –°—Ç–∏–ª—ñ–∑—É—î–º–æ DataFrame
styled_df = style_dataframe(df)

# –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Å—Ç–∏
print(f"\n{'='*80}")
print(f"{'–¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–Ü–ó–ù–ò–• –ú–ï–¢–û–î–Ü–í –û–ë–ß–ò–°–õ–ï–ù–ù–Ø –°–£–ú –í –ú–ê–°–ò–í–Ü':^80}")
print(f"{'='*80}")
print(f"–†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É: {N:,} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {Q:,} (–ø—Ä–∏–±–ª–∏–∑–Ω–æ {Q//2:,} –∑–∞–ø–∏—Ç—ñ–≤ —Å—É–º–∏ —ñ {Q//2:,} –æ–Ω–æ–≤–ª–µ–Ω—å)")
print(f"{'-'*80}")

# –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–π—à–≤–∏–¥—à–∏–π –º–µ—Ç–æ–¥
fastest_method_idx = df['–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)'].idxmin()
fastest_method = df.loc[fastest_method_idx, '–ú–µ—Ç–æ–¥']
fastest_time = df.loc[fastest_method_idx, '–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫)']
print(f"–ù–∞–π—à–≤–∏–¥—à–∏–π –º–µ—Ç–æ–¥: {fastest_method} ({fastest_time:.4f} —Å–µ–∫)")

# –í–∏–≤–æ–¥–∏–º–æ DataFrame
df